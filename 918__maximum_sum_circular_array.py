"""
Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.
A circular array means the end of the array connects to the beginning of the array. Formally, the next element of
nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n].
A subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i],
nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.

Example 1:

Input: nums = [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3.

Example 2:

Input: nums = [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10.

Example 3:

Input: nums = [-3,-2,-3]
Output: -2
Explanation: Subarray [-2] has maximum sum -2.

Constraints:

* n == nums.length
* 1 <= n <= 3 * 10^4
* -3 * 10^4 <= nums[i] <= 3 * 10^4
"""
from typing import List
from unittest import TestCase


class Solution(TestCase):
    def test(self):
        options = [(3, [1, -2, 3, -2]), (10, [5, -3, 5]), (-2, [-3, -2, -3]), (2888,
                                                                               [-83, 140, 117, -195, -291, -128, 186,
                                                                                -22, 50, 103, 202, -201, -163, -65,
                                                                                -139, 22, -82, -157, -208, 202, -173,
                                                                                262, -154, 18, -38, -239, -51, 276,
                                                                                -104, -88, 170, 94, 203, 39, 257, 7,
                                                                                -205, -101, 201, 76, -42, -71, -85, 8,
                                                                                84, -246, 252, -197, -291, -229, 8, 217,
                                                                                293, 112, -34, -128, 17, 165, 12, 220,
                                                                                -234, 87, -80, 233, -27, 91, -38, -253,
                                                                                -299, -201, -129, 286, 265, 35, -261,
                                                                                -263, 33, -271, 216, 77, 276, -12, -33,
                                                                                43, 101, -210, 24, -55, 253, -59, -283,
                                                                                -3, 255, -23, -296, -16, 25, -181, -190,
                                                                                -183, 115, -21, -178, 270, -240, 243,
                                                                                -111, -182, 281, 120, -92, -39, -42,
                                                                                -169, 33, -206, -272, -149, -270, 119,
                                                                                94, -151, 163, -26, 126, 8, -292, 158,
                                                                                1, 48, 180, 180, 224, -96, 273, -275,
                                                                                -298, 64, 202, -182, -295, -73, -215,
                                                                                -4, 28, 296, -105, -170, -109, -160,
                                                                                -268, 190, -200, 157, 60, -203, 131,
                                                                                -40, -127, 3, -158, -210, 4, 297, -134,
                                                                                -95, -100, 198, -10, -255, -34, 187,
                                                                                126, -185, -189, 151, -228, 126, -289,
                                                                                299, 53, 63, -193, -213, 243, -164, 170,
                                                                                -16, -249, -163, 132, 21, -142, 54,
                                                                                -128, -74, 274, -176, -129, -139, 213,
                                                                                -69, 88, -288, 297, -17, -28, -190, 69,
                                                                                53, 120, -164, 46, 35, 16, -244, -190,
                                                                                -229, -203, -173, -100, -183, -139, 118,
                                                                                139, -66, 265, 239, -162, -240, 174,
                                                                                -296, -73, -171, -282, 129, 116, 86,
                                                                                -71, -183, 220, -299, 100, 188, -90,
                                                                                -250, -77, -196, -221, 90, 154, 45, 285,
                                                                                -246, 143, -235, -224, -57, 18, 206, -5,
                                                                                214, 169, 198, 120, 99, 210, 8, -262,
                                                                                -259, -290, 29, 100, -25, -217, 194,
                                                                                -208, -60, 165, -70, -259, 22, 280, 269,
                                                                                247, -251, 133, 182, 282, 158, 299, 255,
                                                                                297, -81, 146, 196, -56, 113, 38, 110]),
            (900_000_000, [30_000] * 30_000), (4, [1, 1, 1, 1]), (3, [1, 1, 0, 1]), (16, [0, 5, 8, -9, 9, -7, 3, -2]),
            (14, [-5, -2, 5, 6, -2, -7, 0, 2, 8]), (4, [1, -12, 3]), (5803,
                                                                      [52, 183, 124, 154, -170, -191, -240, 107, -178,
                                                                       171, 75, 186, -125, 61, -298, 284, 21, -73, -294,
                                                                       253, 146, 248, -248, 127, 26, 289, 118, -22,
                                                                       -300, 26, -116, -113, -44, 29, 252, -278, 47,
                                                                       254, -106, 246, -275, 42, 257, 15, 96, -298, -69,
                                                                       -104, -239, -95, -4, 76, -202, 156, -14, -178,
                                                                       188, -84, 78, -195, -125, 28, 109, 125, -25, -53,
                                                                       58, 287, 55, -296, 198, 281, 53, -160, 146, 298,
                                                                       25, -41, -3, 27, -242, 169, 287, -281, 19, 91,
                                                                       213, 115, 211, -218, 124, -25, -272, 278, 296,
                                                                       -177, -166, -192, 97, -49, -25, 168, -81, 6, -94,
                                                                       267, 293, 146, -1, -258, 256, 283, -156, 197, 28,
                                                                       78, 267, -151, -230, -66, 100, -94, -66, -123,
                                                                       121, -214, -182, 187, 65, -186, 215, 273, 243,
                                                                       -99, -76, 178, 59, 190, 279, 300, 217, 67, -117,
                                                                       170, 163, 153, -37, -147, -251, 296, -176, 117,
                                                                       68, 258, -159, -300, -36, -91, -60, 195, -293,
                                                                       -116, 208, 175, -100, -97, 188, 79, -270, 80,
                                                                       100, 211, 112, 264, -217, -142, 5, 105, 171,
                                                                       -264, -247, 138, 275, 227, -86, 30, -219, 153,
                                                                       10, -66, 267, 22, -56, -70, -234, -66, 89, 182,
                                                                       110, -146, 162, -48, -201, -240, -225, -15, -275,
                                                                       129, -117, 28, 150, 84, -264, 249, -85, 70, -140,
                                                                       -259, 26, 162, 5, -203, 143, 184, 101, 140, 207,
                                                                       131, 177, 274, -178, -79, 14, -36, 104, 52, 31,
                                                                       257, 273, -52, 74, 276, 104, -133, -255, 188,
                                                                       -252, 229, 200, -74, -39, -250, 142, -201, -196,
                                                                       -43, -40, 255, -149, -299, -197, -175, -96, -155,
                                                                       -196, -24, 12, 79, 71, -144, -59, -120, 227,
                                                                       -256, -163, -297, 116, 286, -283, -31, -221, -41,
                                                                       121, -170, 160, 205, 8, 88, 25, -272, -107, 292,
                                                                       -180, 299, 94, -97, -81, -134, 37, 238]),
            (540, [287, 55, -296, 198]), ]
        for expected, nums in options:
            with self.subTest(str(expected)):
                self.assertEqual(expected, self.maxSubarraySumCircular(nums))

    def maxSubarraySumCircular(self, nums: List[int]) -> int:
        max_sum, min_sum = nums[0], nums[0]
        cur_max, cur_min = 0, 0
        total = 0
        for n in nums:
            cur_max = max(cur_max + n, n)
            cur_min = min(cur_min + n, n)

            max_sum = max(max_sum, cur_max)
            min_sum = min(min_sum, cur_min)

            total += n

        return max(max_sum, total - min_sum) if max_sum > 0 else max_sum

    def maxSubarraySumCircularBrute(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return nums[0]

        m = nums[0]
        for i in range(len(nums)):
            for s in range(1, len(nums) + 1):
                option = []
                while s:
                    option.append(nums[(i + s) % len(nums)])
                    s -= 1
                m = max(m, sum(option))

        return m
